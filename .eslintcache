[{"C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\index.js":"1","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\App.js":"2","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\reportWebVitals.js":"3","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\Routes.js":"4","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\constants\\Routes.js":"5","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\layout\\Container.js":"6","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\layout\\Content.js":"7","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\common\\Header.js":"8","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\common\\SideMenu.js":"9","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\home\\Home.js":"10","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\athlete\\ManageAthlete.js":"11","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\athlete\\CreateAthlete.js":"12","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\common\\Footer.js":"13","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\athlete\\AthleteSearchItem.js":"14","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\constants\\Constants.js":"15","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\services\\athlete-service.js":"16","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\services\\event-service.js":"17","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\athlete\\UpdateModal.js":"18"},{"size":517,"mtime":1637001210653,"results":"19","hashOfConfig":"20"},{"size":111,"mtime":1637001210595,"results":"21","hashOfConfig":"20"},{"size":375,"mtime":1637001210654,"results":"22","hashOfConfig":"20"},{"size":676,"mtime":1637001210596,"results":"23","hashOfConfig":"20"},{"size":550,"mtime":1637001210651,"results":"24","hashOfConfig":"20"},{"size":463,"mtime":1637001210648,"results":"25","hashOfConfig":"20"},{"size":1029,"mtime":1637001210650,"results":"26","hashOfConfig":"20"},{"size":2028,"mtime":1637001210627,"results":"27","hashOfConfig":"20"},{"size":6049,"mtime":1637004431967,"results":"28","hashOfConfig":"20"},{"size":456,"mtime":1637001210635,"results":"29","hashOfConfig":"20"},{"size":16343,"mtime":1637007147119,"results":"30","hashOfConfig":"20"},{"size":25712,"mtime":1637004431963,"results":"31","hashOfConfig":"20"},{"size":344,"mtime":1637007174591,"results":"32","hashOfConfig":"20"},{"size":6269,"mtime":1637006775480,"results":"33","hashOfConfig":"20"},{"size":15849,"mtime":1637001210651,"results":"34","hashOfConfig":"20"},{"size":2321,"mtime":1637004431968,"results":"35","hashOfConfig":"20"},{"size":459,"mtime":1637001210655,"results":"36","hashOfConfig":"20"},{"size":26204,"mtime":1637004431965,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1gj2x1d",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},"C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\index.js",[],["80","81"],"C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\App.js",[],"C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\Routes.js",[],"C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\constants\\Routes.js",[],"C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\layout\\Container.js",["82"],"import React, {useState} from \"react\";\r\nimport Content from \"./Content\";\r\nimport Header from \"../common/Header\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst Container = (history) => {\r\n    return (\r\n        <div className=\"app\">\r\n            <Header history={history} />\r\n            <Content history={history}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Container;\r\n","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\layout\\Content.js",[],"C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\common\\Header.js",["83"],"import React from \"react\";\r\nimport SideMenu from \"./SideMenu\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div>\r\n            <header className=\"app-header fixed-top\">\r\n                <div className=\"app-header-inner\">\r\n                    <div className=\"container-fluid py-2\">\r\n                        <div className=\"app-header-content\">\r\n                            <div className=\"row justify-content-between align-items-center\">\r\n\r\n                                <div className=\"col-auto\">\r\n                                    <a id=\"sidepanel-toggler\" className=\"sidepanel-toggler d-inline-block d-xl-none\"\r\n                                       href=\"#\">\r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\"\r\n                                             viewBox=\"0 0 30 30\" role=\"img\">\r\n                                            <title>Menu</title>\r\n                                            <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-miterlimit=\"10\"\r\n                                                  stroke-width=\"2\"\r\n                                                  d=\"M4 7h22M4 15h22M4 23h22\"></path>\r\n                                        </svg>\r\n                                    </a>\r\n                                </div>\r\n                                <div className=\"search-mobile-trigger d-sm-none col\">\r\n                                    <i className=\"search-mobile-trigger-icon fas fa-search\"></i>\r\n                                </div>\r\n                                <div className=\"app-search-box col p-1\">\r\n                                    {\"athlete management system \" + props.history.location.pathname}\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <SideMenu history={props.history}/>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\common\\SideMenu.js",["84","85","86"],"import React from \"react\";\r\nimport { ROUTES } from \"../../constants/Routes\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst SideMenu = (props) => {\r\n\r\n    const isActive = (history, path) => {\r\n        if (history.location.pathname === path) {\r\n            return \"nav-link active\";\r\n        } else {\r\n            return \"nav-link\";\r\n        }\r\n    };\r\n\r\n    const isSubActive = (history, path) => {\r\n        if (history.location.pathname.includes(path)) {\r\n            return \"nav-link submenu-toggle active\";\r\n        } else {\r\n            return \"nav-link submenu-toggle\";\r\n        }\r\n    };\r\n\r\n    const isSubLinkActive = (history, path) => {\r\n        if (history.location.pathname === path) {\r\n            return \"submenu-link active\";\r\n        } else {\r\n            return \"submenu-link\";\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"app-sidepanel\" className=\"app-sidepanel\">\r\n                <div id=\"sidepanel-drop\" className=\"sidepanel-drop\"></div>\r\n                <div className=\"sidepanel-inner d-flex flex-column\">\r\n                    <a href=\"#\" id=\"sidepanel-close\" className=\"sidepanel-close d-xl-none\">&times;</a>\r\n                    <div className=\"app-branding\">\r\n                        <a className=\"app-logo\" href=\"index.html\">\r\n                            <span className=\"logo-text\">Athlete System</span></a>\r\n\r\n                    </div>\r\n                    <nav id=\"app-nav-main\" className=\"app-nav app-nav-main flex-grow-1\">\r\n                        <ul className=\"app-menu list-unstyled accordion\" id=\"menu-accordion\">\r\n                            {/*<li className=\"nav-item\">*/}\r\n\r\n                            {/*    <Link*/}\r\n                            {/*        className={isActive(props.history, ROUTES.landing_page)}*/}\r\n                            {/*        to={ROUTES.landing_page}>*/}\r\n                            {/*        <span className=\"nav-icon\">*/}\r\n                            {/*            <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-house-door\"*/}\r\n                            {/*                 fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">*/}\r\n                            {/*              <path fill-rule=\"evenodd\"*/}\r\n                            {/*                    d=\"M7.646 1.146a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 .146.354v7a.5.5 0 0 1-.5.5H9.5a.5.5 0 0 1-.5-.5v-4H7v4a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5v-7a.5.5 0 0 1 .146-.354l6-6zM2.5 7.707V14H6v-4a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4h3.5V7.707L8 2.207l-5.5 5.5z\"/>*/}\r\n                            {/*              <path fill-rule=\"evenodd\" d=\"M13 2.5V6l-2-2V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5z\"/>*/}\r\n                            {/*            </svg>*/}\r\n                            {/*         </span>*/}\r\n                            {/*        <span className=\"nav-link-text\">Home</span>*/}\r\n                            {/*    </Link>*/}\r\n                            {/*</li>*/}\r\n\r\n                            <li className=\"nav-item has-submenu\">\r\n                                <a className={isSubActive(props.history, \"athlete\")} href=\"#\" data-bs-toggle=\"collapse\"\r\n                                   data-bs-target=\"#submenu-1\"\r\n                                   aria-expanded=\"false\" aria-controls=\"submenu-1\">\r\n                                    <span className=\"nav-icon\">\r\n                                          <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-files\"\r\n                                               fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                              <path fill-rule=\"evenodd\"\r\n                                                    d=\"M4 2h7a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2zm0 1a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h7a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H4z\"/>\r\n                                              <path\r\n                                                  d=\"M6 0h7a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2v-1a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H6a1 1 0 0 0-1 1H4a2 2 0 0 1 2-2z\"/>\r\n                                          </svg>\r\n                                     </span>\r\n                                    <span className=\"nav-link-text\">Athlete Management</span>\r\n                                    <span className=\"submenu-arrow\">\r\n                                         <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-chevron-down\"\r\n                                              fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                          <path fill-rule=\"evenodd\"\r\n                                                d=\"M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\"/>\r\n                                        </svg>\r\n\t                                </span>\r\n                                </a>\r\n                                <div id=\"submenu-1\" className=\"collapse submenu submenu-1\"\r\n                                     data-bs-parent=\"#menu-accordion\">\r\n                                    <ul className=\"submenu-list list-unstyled\">\r\n                                        <li className=\"submenu-item\">\r\n                                            <Link to={ROUTES.create_athlete_page} className={isSubLinkActive(props.history, ROUTES.create_athlete_page)}>Create Athlete</Link>\r\n                                        </li>\r\n\r\n                                        <li className=\"submenu-item\">\r\n                                            <Link to={ROUTES.manage_athlete_page} className={isSubLinkActive(props.history, ROUTES.manage_athlete_page)} >Manage Athlete</Link>\r\n                                        </li>\r\n\r\n                                    </ul>\r\n                                </div>\r\n                            </li>\r\n\r\n                        </ul>\r\n                    </nav>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SideMenu;\r\n","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\home\\Home.js",[],"C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\athlete\\ManageAthlete.js",["87","88","89","90","91","92","93","94","95"],"C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\athlete\\CreateAthlete.js",["96","97","98","99","100","101","102"],"import React, {useEffect, useState} from \"react\";\r\nimport Footer from \"../common/Footer\";\r\nimport Image from 'react-bootstrap/Image';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport 'date-fns';\r\nimport moment from \"moment\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport {THEME_COLOR_CODE, WHITE_COLOR_CODE, countries} from \"../../constants/Constants\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n//Services\r\nimport {addAthlete, addAthleteEvents, getAllGenders, uploadImage} from \"../../services/athlete-service\";\r\nimport {getAllEvents} from \"../../services/event-service\";\r\nconst Swal = require('sweetalert2');\r\n\r\n\r\nconst CreateAthlete = (props) => {\r\n    const [values, setValues] = useState({\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        country: \"\",\r\n        date: moment(Date.now()).format(\"YYYY-MM-DD\"),\r\n        image: \"\"\r\n    });\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    const [loaderGender, setLoaderGender] = useState(false);\r\n    const [loaderEvents, setLoaderEvents] = useState(false);\r\n    const [loaderSubmit, setLoaderSubmit] = useState(false);\r\n\r\n    const {\r\n        firstName,\r\n        lastName,\r\n        date,\r\n        country,\r\n        image\r\n    } = values;\r\n\r\n    const [selectedDate, setSelectedDate] = useState(Date.now());\r\n\r\n    const [files, setFiles] = useState([]);\r\n    const {getRootProps, getInputProps} = useDropzone({\r\n        accept: 'image/*',\r\n        onDrop: acceptedFiles => {\r\n            setFiles(acceptedFiles.map(file => Object.assign(file, {\r\n                preview: URL.createObjectURL(file)\r\n            })));\r\n        }\r\n    });\r\n\r\n    const [genders, setGenders] = useState([]);\r\n    const [events, setEvents] = useState([]);\r\n\r\n    //selected values\r\n    let selectedEvent = \"\";\r\n    const [selectedGender, setSelectedGender] = useState(\"\");\r\n    const [selectedEvents, setSelectedEvents] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getGenders();\r\n        getEvents();\r\n    }, []);\r\n\r\n    const getGenders = () => {\r\n        setLoaderGender(true);\r\n        getAllGenders()\r\n            .then(result => {\r\n                setLoaderGender(false);\r\n                setGenders(result);\r\n                setSelectedGender(result[0].id);\r\n            })\r\n            .catch(err => console.error(err));\r\n    };\r\n\r\n    const getEvents = () => {\r\n        setLoaderEvents(true);\r\n        getAllEvents()\r\n            .then(result => {\r\n                setLoaderEvents(false);\r\n                setEvents(result.content);\r\n                selectedEvent = result.content[0].eventId;\r\n            })\r\n            .catch(err => console.error(err));\r\n    };\r\n\r\n    //Change events handlers\r\n    const onDataChange = (name) => (event) => {\r\n        setValues({ ...values, [name]: event.target.value });\r\n    };\r\n\r\n    const genderOnChange = (event) => {\r\n        setSelectedGender(event.target.value);\r\n    };\r\n\r\n    const onAddButtonClicked = () => {\r\n        const eventId = selectedEvent ? selectedEvent : events[0].eventId;\r\n        let event;\r\n\r\n        events.forEach(e => {\r\n            if (e.eventId == eventId) {\r\n                event = e;\r\n            }\r\n        })\r\n\r\n        if(selectedEvents.some(item => event.eventId === item.eventId)) {\r\n            toast.warn('Event is already added!', {\r\n                position: \"bottom-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            })\r\n            //Add popup\r\n        }else {\r\n            setSelectedEvents([...selectedEvents, event]);\r\n        }\r\n    };\r\n\r\n    const onRemoveButtonClicked = (eventId) => {\r\n        const newArray = selectedEvents.filter(function (se) {\r\n            return se.eventId != eventId;\r\n        });\r\n        setSelectedEvents(newArray);\r\n    };\r\n\r\n    const eventOnChange = (event) => {\r\n        selectedEvent = event.target.value;\r\n    };\r\n\r\n    const handleDateChange = (date) => {\r\n        setSelectedDate(date);\r\n        setValues({ ...values, 'date': moment(date).format(\"YYYY-MM-DD\") });\r\n    };\r\n\r\n    const clickOnSubmit = () => {\r\n\r\n        setLoaderSubmit(true);\r\n        setError(false);\r\n\r\n        let athleteObj = {\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            country: country,\r\n            image:  \"\",\r\n            dob: date,\r\n            gender: {\r\n                \"id\": selectedGender\r\n            }\r\n        };\r\n        //validate athlete object\r\n        if(formValidator(athleteObj)){\r\n            //show error\r\n            setError(true);\r\n            setLoaderSubmit(false);\r\n        }else {\r\n            addAthlete(athleteObj)\r\n                .then(addAthleteResponse => {\r\n                    console.log(addAthleteResponse);\r\n                    let athleteEvents = [];\r\n                    selectedEvents.forEach(ev => {\r\n                        athleteEvents.push({\r\n                            athleteId: addAthleteResponse.athleteId,\r\n                            eventId: ev.eventId\r\n                        })\r\n                    })\r\n                    console.log(athleteEvents);\r\n                    addAthleteEvents(athleteEvents)\r\n                        .then(responseAthleteEvents => {\r\n                            if(files[0]){\r\n                                uploadImage(files[0], addAthleteResponse.athleteId)\r\n                            }\r\n                            setLoaderSubmit(false);\r\n                            setValues({\r\n                                ...values,\r\n                                firstName: \"\",\r\n                                lastName: \"\",\r\n                                country: \"\",\r\n                                date: moment(Date.now()).format(\"YYYY-MM-DD\"),\r\n                            });\r\n                            setFiles([]);\r\n                            setSelectedDate(Date.now());\r\n                            setSelectedEvents([]);\r\n                            setSelectedCountry(\"\");\r\n\r\n                            Swal.fire(\r\n                                {\r\n                                    title: 'Athlete added',\r\n                                    text: \"New athlete added successfully!\",\r\n                                    icon: 'success',\r\n                                    confirmButtonColor: '#7AC943',\r\n                                }\r\n                            )\r\n                        })\r\n\r\n                })\r\n                .catch(error => console.error(error));\r\n        }\r\n\r\n    };\r\n\r\n    const formValidator = (athleteObj) => {\r\n        let flag = false;\r\n        if(!validateAthleteObject(athleteObj))\r\n            flag = true;\r\n\r\n        if (!validateAge(athleteObj))\r\n            flag = true;\r\n\r\n        if(!validateNoOfEvents())\r\n            flag = true;\r\n\r\n        return flag;\r\n    }\r\n\r\n    const validateAthleteObject = (athleteObj) => {\r\n        if(athleteObj.firstName === \"\" || athleteObj.lastName === \"\" || athleteObj.country === \"\")\r\n            return false;\r\n\r\n        return true;\r\n    };\r\n\r\n    const [calenderError, setCalenderError] = useState(false);\r\n    const validateAge = (athleteObj) => {\r\n        setCalenderError(false);\r\n        const getAge = birthDate => Math.floor((new Date() - new Date(birthDate).getTime()) / 3.15576e+10);\r\n        if(getAge(athleteObj.dob) < 16) {\r\n            setCalenderError(true);\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const validateNoOfEvents = () => {\r\n        if(selectedEvents.length === 0) {\r\n            //show alert\r\n            toast.warn('At least one event must be added!', {\r\n                position: \"bottom-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            })\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    const [selectedCountry, setSelectedCountry] = useState(\"\");\r\n\r\n    const countryOnChange = (c) => {\r\n        setValues({ ...values, 'country': c.code });\r\n        setSelectedCountry(c);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"app-wrapper\">\r\n                <div className=\"app-content pt-3 p-md-3 p-lg-4\">\r\n                    <div className=\"container-xl\">\r\n                        <h1 className=\"app-page-title\">Create Athlete</h1>\r\n                        <hr className=\"mb-4\"/>\r\n                        <div className=\"row g-4 settings-section\">\r\n                            <div className=\"col-12 col-md-4\">\r\n                                <h3 className=\"section-title\">Athlete Photo</h3>\r\n                                <div className=\"row mt-3\">\r\n                                    <div className=\"col-12\">\r\n                                        {\r\n                                            files[0] && (\r\n                                                <Image className=\"w-100 h-100\"\r\n                                                       src={files[0] ? files[0].preview : 'Upload Image'}/>\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-12 text-center\">\r\n                                                <button {...getRootProps({className: \"dropzone\"})}\r\n                                                        className=\"btn app-btn-primary mt-3\">\r\n                                                    <input {...getInputProps()} />\r\n                                                    {(<p className=\"pt-2\">Upload Photo</p>)}\r\n                                                </button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-12 col-md-8\">\r\n                                <div className=\"app-card app-card-settings shadow-sm p-4\">\r\n\r\n                                    <div className=\"app-card-body\">\r\n                                        <div className=\"settings-form\">\r\n                                            <div className=\"mb-3\">\r\n                                                <label className=\"form-label\">First Name</label>\r\n                                                <input type=\"text\" value={firstName}\r\n                                                       onChange={onDataChange('firstName')}\r\n                                                       className=\"form-control\"\r\n                                                       style={{borderColor: firstName == \"\" && error ? 'red' : ''}}/>\r\n                                            </div>\r\n                                            <div className=\"mb-1\">\r\n                                                <label className=\"form-label\">Last Name</label>\r\n                                                <input type=\"text\" value={lastName}\r\n                                                       onChange={onDataChange('lastName')}\r\n                                                       className=\"form-control\" required\r\n                                                       style={{borderColor: lastName == \"\" && error ? 'red' : ''}}/>\r\n                                            </div>\r\n                                            <div className=\"mt-3 mb-3\">\r\n                                                <div className=\"col-12\">\r\n                                                    <div className=\"row\">\r\n                                                        <div className=\"col-4 align-self-center\">\r\n                                                            <label className=\"form-label\">Date of Birth</label>\r\n                                                        </div>\r\n                                                        <div className=\"col-8\">\r\n                                                            <DatePicker\r\n                                                                selected={selectedDate}\r\n                                                                onChange={(date) => handleDateChange(date)} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"row mt-3\" style={{display: error && calenderError ? '' : 'none'}}>\r\n                                                        <div className=\"col-4\">\r\n\r\n                                                        </div>\r\n                                                        <div className=\"col-8 align-self-center\" style={{color: \"red\"}}>\r\n                                                            Age should greater than 16\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"mb-1\">\r\n                                                <div className=\"col-12\">\r\n                                                    <div className=\"row\">\r\n                                                        <div className=\"col-4 align-self-center\">\r\n                                                            <label className=\"form-label\">Gender</label>\r\n                                                        </div>\r\n                                                        <div className=\"col-8\">\r\n                                                            {!loaderGender ? (\r\n                                                                <select className=\"form-select\" onChange={genderOnChange}>\r\n                                                                    {\r\n                                                                        genders.map(gender => (\r\n                                                                            <option value={gender.id}>{gender.type}</option>\r\n                                                                        ))\r\n                                                                    }\r\n                                                                </select>\r\n                                                            ) : (\r\n                                                                <div className=\"col-12 align-self-center text-start\">\r\n                                                                    <Loader type=\"Bars\" color={THEME_COLOR_CODE} height={30} width={80} />\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"col-12 mt-3 mb-3\">\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-4 align-self-center\">\r\n                                                        <label className=\"form-label\">Country</label>\r\n                                                    </div>\r\n                                                    <div className=\"col-8\">\r\n                                                        <Autocomplete\r\n                                                            onChange={(event, newValue) => {\r\n                                                                countryOnChange(newValue ? newValue : '');\r\n                                                            }}\r\n                                                            value={selectedCountry}\r\n                                                            id=\"country-select-demo\"\r\n                                                            sx={{ width: '100%' }}\r\n                                                            options={countries}\r\n                                                            autoHighlight\r\n                                                            getOptionLabel={options => options.label ? options.label + \" - \" + options.code : options}\r\n                                                            renderOption={(props, option) => (\r\n                                                                <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\r\n                                                                    <img\r\n                                                                        loading=\"lazy\"\r\n                                                                        width=\"20\"\r\n                                                                        src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`}\r\n                                                                        srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`}\r\n                                                                        alt=\"\"\r\n                                                                    />\r\n                                                                    {option.label} ({option.code}) +{option.phone}\r\n                                                                </Box>\r\n                                                            )}\r\n                                                            renderInput={(params) => (\r\n                                                                <TextField\r\n                                                                    error={error && country === \"\"}\r\n                                                                    {...params}\r\n                                                                    label=\"Choose a country\"\r\n                                                                    value={country}\r\n                                                                    inputProps={{\r\n                                                                        ...params.inputProps,\r\n                                                                        autoComplete: 'new-password', // disable autocomplete and autofill\r\n                                                                    }}\r\n                                                                />\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row mt-3 g-4 settings-section\">\r\n                            <div className=\"col-12\">\r\n                                <div className=\"app-card app-card-settings shadow-sm p-4\">\r\n                                    <div className=\"app-card-body\">\r\n                                        <div className=\"row g-3 mb-4 align-items-center justify-content-between\">\r\n                                            <div className=\"col-auto\">\r\n                                                <h1 className=\"app-page-title mb-0\">Events</h1>\r\n                                            </div>\r\n                                            <div className=\"col-auto\">\r\n                                                <div className=\"page-utilities\">\r\n                                                    <div\r\n                                                        className=\"row g-2 justify-content-start justify-content-md-end align-items-center\">\r\n                                                        <div className=\"col-auto\">\r\n                                                            {!loaderEvents ? (\r\n                                                                <select className=\"form-select w-auto\" onChange={eventOnChange}>\r\n                                                                    {\r\n                                                                        events.map(event => (\r\n                                                                            <option value={event.eventId}>{event.name}</option>\r\n                                                                        ))\r\n                                                                    }\r\n                                                                </select>\r\n                                                            ) : (\r\n                                                                <div className=\"col-12 align-self-center text-start\">\r\n                                                                    <Loader type=\"Bars\" color={THEME_COLOR_CODE} height={30} width={80} />\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </div>\r\n                                                        <div className=\"col-auto\">\r\n                                                            <div className=\"col-auto\">\r\n                                                                <button type=\"submit\"\r\n                                                                        onClick={onAddButtonClicked}\r\n                                                                        className=\"btn app-btn-secondary\">Add\r\n                                                                </button>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"table-responsive\">\r\n                                            <table className=\"table app-table-hover mb-0 text-left\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th className=\"cell\">Event Name</th>\r\n                                                        <th className=\"cell\">Remove</th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {\r\n                                                        selectedEvents.map(e => (\r\n                                                            <tr>\r\n                                                                <td className=\"cell\">{e.name}</td>\r\n                                                                <td className=\"cell\">\r\n                                                                    <a style={{cursor: \"pointer\"}}\r\n                                                                        onClick={() => onRemoveButtonClicked(e.eventId)}\r\n                                                                        className=\"btn-sm btn-outline-danger\">X</a>\r\n                                                                </td>\r\n                                                            </tr>\r\n                                                        ))\r\n                                                    }\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row mt-3\">\r\n                            <div className=\"text-end\">\r\n                                <button className=\"btn app-btn-primary\"\r\n                                        onClick={clickOnSubmit}\r\n                                        disabled={loaderEvents & loaderGender & loaderSubmit}>\r\n                                    {loaderSubmit ? (<Loader type=\"Bars\" color={WHITE_COLOR_CODE} height={10} width={30} />) : 'Save'}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <ToastContainer />\r\n                <Footer props={props}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateAthlete;\r\n","C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\common\\Footer.js",[],"C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\athlete\\AthleteSearchItem.js",["103","104","105","106","107","108"],"C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\constants\\Constants.js",[],"C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\services\\athlete-service.js",[],"C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\services\\event-service.js",[],"C:\\Users\\kasun\\Desktop\\App\\athlete-management-system-frontend\\src\\components\\athlete\\UpdateModal.js",["109","110","111","112","113","114","115","116","117"],"import React, {useEffect, useState} from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport {countries, THEME_COLOR_CODE, WHITE_COLOR_CODE} from \"../../constants/Constants\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport Box from \"@mui/material/Box\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport {toast, ToastContainer} from \"react-toastify\";\r\nimport Footer from \"../common/Footer\";\r\nimport moment from \"moment\";\r\nimport {useDropzone} from \"react-dropzone\";\r\n\r\n//services\r\nimport {\r\n    updateAthlete,\r\n    addAthleteEvents,\r\n    getAllGenders,\r\n    getAthleteById,\r\n    uploadImage\r\n} from \"../../services/athlete-service\";\r\nimport {getAllEvents} from \"../../services/event-service\";\r\n\r\nconst Swal = require('sweetalert2');\r\n\r\nconst UpdateModal = (props) => {\r\n    const [values, setValues] = useState({\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        country: \"\",\r\n        date: moment(Date.now()).format(\"YYYY-MM-DD\"),\r\n        image: \"\"\r\n    });\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    const [loaderGender, setLoaderGender] = useState(false);\r\n    const [loaderEvents, setLoaderEvents] = useState(false);\r\n    const [loaderSubmit, setLoaderSubmit] = useState(false);\r\n\r\n    const {\r\n        firstName,\r\n        lastName,\r\n        date,\r\n        country,\r\n        image\r\n    } = values;\r\n\r\n    const [selectedDate, setSelectedDate] = useState(Date.now());\r\n\r\n    const [files, setFiles] = useState([]);\r\n\r\n    const {getRootProps, getInputProps} = useDropzone({\r\n        accept: 'image/*',\r\n        onDrop: acceptedFiles => {\r\n            setFiles(acceptedFiles.map(file => Object.assign(file, {\r\n                preview: URL.createObjectURL(file)\r\n            })));\r\n        }\r\n    });\r\n\r\n    const [genders, setGenders] = useState([]);\r\n    const [events, setEvents] = useState([]);\r\n\r\n    //selected values\r\n    let selectedEvent = \"\";\r\n    const [selectedGender, setSelectedGender] = useState(\"\");\r\n    const [selectedEvents, setSelectedEvents] = useState([]);\r\n    const [selectedCountry, setSelectedCountry] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        setInitialValues();\r\n        getGenders();\r\n        getEvents();\r\n        setValues({ ...values,\r\n            'firstName': props.athlete.firstName,\r\n            'lastName' : props.athlete.lastName,\r\n            'country' : props.athlete.country,\r\n            'date' : moment(props.athlete.dob).format(\"YYYY-MM-DD\"),\r\n            'image': props.athlete.image\r\n        });\r\n        getAthleteDetailsById(props.athlete.athleteId);\r\n        setSelectedDate(moment(props.athlete.dob, \"YYYY/MM/DD H:mm\").valueOf());\r\n        countries.forEach(c => {\r\n            if(c.code === props.athlete.country)\r\n                setSelectedCountry(c);\r\n        });\r\n        setFiles([...files, props.athlete.image]);\r\n    }, [props.athlete, props.modalId]);\r\n\r\n    const setInitialValues = () => {\r\n        setSelectedEvents([]);\r\n        setLoaderSubmit(false);\r\n        setValues({\r\n            ...values,\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            country: \"\",\r\n            date: moment(Date.now()).format(\"YYYY-MM-DD\"),\r\n        });\r\n    };\r\n\r\n    const getGenders = () => {\r\n        setLoaderGender(true);\r\n        getAllGenders()\r\n            .then(result => {\r\n                setLoaderGender(false);\r\n                setGenders(result);\r\n                setSelectedGender(result[0].id);\r\n            })\r\n            .catch(err => console.error(err));\r\n    };\r\n\r\n    const getEvents = () => {\r\n        setLoaderEvents(true);\r\n        getAllEvents()\r\n            .then(result => {\r\n                setLoaderEvents(false);\r\n                setEvents(result.content);\r\n                selectedEvent = result.content[0].eventId;\r\n            })\r\n            .catch(err => console.error(err));\r\n    };\r\n\r\n    const getAthleteDetailsById = (athleteId) => {\r\n        getAthleteById(athleteId)\r\n            .then(data => {\r\n                setSelectedEvents(data.events);\r\n            })\r\n            .catch(err => console.error(err))\r\n    }\r\n\r\n    //Change events handlers\r\n    const onDataChange = (name) => (event) => {\r\n        setValues({ ...values, [name]: event.target.value });\r\n    };\r\n\r\n    const genderOnChange = (event) => {\r\n        setSelectedGender(event.target.value);\r\n    };\r\n\r\n    const onAddButtonClicked = () => {\r\n        const eventId = selectedEvent ? selectedEvent : events[0].eventId;\r\n        let event;\r\n\r\n        events.forEach(e => {\r\n            if (e.eventId == eventId) {\r\n                event = e;\r\n            }\r\n        })\r\n\r\n        if(selectedEvents.some(item => event.eventId === item.eventId)) {\r\n            toast.warn('Event is already added!', {\r\n                position: \"bottom-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            })\r\n            //Add popup\r\n        }else {\r\n            setSelectedEvents([...selectedEvents, event]);\r\n        }\r\n    };\r\n\r\n    const onRemoveButtonClicked = (eventId) => {\r\n        const newArray = selectedEvents.filter(function (se) {\r\n            return se.eventId != eventId;\r\n        });\r\n        setSelectedEvents(newArray);\r\n    };\r\n\r\n    const eventOnChange = (event) => {\r\n        selectedEvent = event.target.value;\r\n    };\r\n\r\n    const handleDateChange = (date) => {\r\n        setSelectedDate(date);\r\n        setValues({ ...values, 'date': moment(date).format(\"YYYY-MM-DD\") });\r\n    };\r\n\r\n\r\n    const formValidator = (athleteObj) => {\r\n        let flag = false;\r\n        if(!validateAthleteObject(athleteObj))\r\n            flag = true;\r\n\r\n        if (!validateAge(athleteObj))\r\n            flag = true;\r\n\r\n        if(!validateNoOfEvents())\r\n            flag = true;\r\n\r\n        return flag;\r\n    }\r\n\r\n    const validateAthleteObject = (athleteObj) => {\r\n        if(athleteObj.firstName === \"\" || athleteObj.lastName === \"\" || athleteObj.country === \"\")\r\n            return false;\r\n\r\n        return true;\r\n    };\r\n\r\n    const [calenderError, setCalenderError] = useState(false);\r\n    const validateAge = (athleteObj) => {\r\n        setCalenderError(false);\r\n        const getAge = birthDate => Math.floor((new Date() - new Date(birthDate).getTime()) / 3.15576e+10);\r\n        if(getAge(athleteObj.dob) < 16) {\r\n            setCalenderError(true);\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const validateNoOfEvents = () => {\r\n        if(selectedEvents.length === 0) {\r\n            //show alert\r\n            toast.warn('At least one event must be added!', {\r\n                position: \"bottom-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            })\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    const clickOnUpdate = () => {\r\n\r\n        setLoaderSubmit(true);\r\n        setError(false);\r\n        let genderType;\r\n        genders.forEach(g => {\r\n            if(selectedGender == g.id)\r\n                genderType = g.type;\r\n        })\r\n        let athleteObj = {\r\n            athleteId: props.athlete.athleteId,\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            country: country,\r\n            image:  image,\r\n            dob: date,\r\n            gender: {\r\n                \"id\": selectedGender,\r\n                \"type\": genderType\r\n            }\r\n        };\r\n\r\n        //validate athlete object\r\n        if(formValidator(athleteObj)){\r\n            //show error\r\n            setError(true);\r\n            setLoaderSubmit(false);\r\n        }else {\r\n            updateAthlete(athleteObj, props.athlete.athleteId)\r\n                .then(addAthleteResponse => {\r\n                    let athleteEvents = [];\r\n                    selectedEvents.forEach(ev => {\r\n                        athleteEvents.push({\r\n                            athleteId: addAthleteResponse.athleteId,\r\n                            eventId: ev.eventId\r\n                        })\r\n                    })\r\n                    addAthleteEvents(athleteEvents)\r\n                        .then(responseAthleteEvents => {\r\n                            if(files[0]){\r\n                                uploadImage(files[0], addAthleteResponse.athleteId)\r\n                            }\r\n                            setLoaderSubmit(false);\r\n                            Swal.fire(\r\n                                {\r\n                                    title: 'Athlete updated',\r\n                                    text: \"Athlete data updated successfully!\",\r\n                                    icon: 'success',\r\n                                    confirmButtonColor: '#7AC943',\r\n                                }\r\n                            )\r\n                        })\r\n\r\n                })\r\n                .catch(error => console.error(error));\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"col-12\" key={props.modalId}>\r\n            <Modal size={\"xl\"} show={props.show} onHide={props.handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Update Athlete</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className=\"p-1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-4\">\r\n                                <h3 className=\"text-center\">Athlete Photo</h3>\r\n                                <div className=\"row mt-3\">\r\n                                    <div className=\"col-12\">\r\n                                        <Image className=\"w-100 h-100\" src={files[0] ? files[0].preview : 'data:image/png;base64, ' + image}/>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-12 text-center\">\r\n                                                <button {...getRootProps({className: \"dropzone\"})}\r\n                                                        className=\"btn app-btn-primary mt-3\">\r\n                                                    <input {...getInputProps()} />\r\n                                                    {(<p className=\"pt-2\">Upload Photo</p>)}\r\n                                                </button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-8\">\r\n                                <div className=\"app-card app-card-settings shadow-sm p-4\">\r\n\r\n                                    <div className=\"app-card-body\">\r\n                                        <div className=\"settings-form\">\r\n                                            <div className=\"mb-3\">\r\n                                                <label className=\"form-label\">First Name</label>\r\n                                                <input type=\"text\" value={firstName}\r\n                                                       onChange={onDataChange('firstName')}\r\n                                                       className=\"form-control\"\r\n                                                       style={{borderColor: firstName == \"\" && error ? 'red' : ''}}/>\r\n                                            </div>\r\n                                            <div className=\"mb-1\">\r\n                                                <label className=\"form-label\">Last Name</label>\r\n                                                <input type=\"text\" value={lastName}\r\n                                                       onChange={onDataChange('lastName')}\r\n                                                       className=\"form-control\" required\r\n                                                       style={{borderColor: lastName == \"\" && error ? 'red' : ''}}/>\r\n                                            </div>\r\n                                            <div className=\"mt-3 mb-3\">\r\n                                                <div className=\"col-12\">\r\n                                                    <div className=\"row\">\r\n                                                        <div className=\"col-4 align-self-center\">\r\n                                                            <label className=\"form-label\">Date of Birth</label>\r\n                                                        </div>\r\n                                                        <div className=\"col-8\">\r\n                                                            <DatePicker\r\n                                                                selected={selectedDate}\r\n                                                                onChange={(date) => handleDateChange(date)} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"row mt-3\" style={{display: error && calenderError ? '' : 'none'}}>\r\n                                                        <div className=\"col-4\">\r\n\r\n                                                        </div>\r\n                                                        <div className=\"col-8 align-self-center\" style={{color: \"red\"}}>\r\n                                                            Age should greater than 16\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"mb-1\">\r\n                                                <div className=\"col-12\">\r\n                                                    <div className=\"row\">\r\n                                                        <div className=\"col-4 align-self-center\">\r\n                                                            <label className=\"form-label\">Gender</label>\r\n                                                        </div>\r\n                                                        <div className=\"col-8\">\r\n                                                            {/*selected={props.athlete.gender.id == gender.id}*/}\r\n                                                            {!loaderGender ? (\r\n                                                                <select className=\"form-select\" onChange={genderOnChange}>\r\n                                                                    {\r\n                                                                        genders.map(gender => (\r\n                                                                            <option value={gender.id}>{gender.type}</option>\r\n                                                                        ))\r\n                                                                    }\r\n                                                                </select>\r\n                                                            ) : (\r\n                                                                <div className=\"col-12 align-self-center text-start\">\r\n                                                                    <Loader type=\"Bars\" color={THEME_COLOR_CODE} height={30} width={80} />\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"col-12 mt-3 mb-3\">\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-4 align-self-center\">\r\n                                                        <label className=\"form-label\">Country</label>\r\n                                                    </div>\r\n                                                    <div className=\"col-8\">\r\n                                                        <Autocomplete\r\n                                                            onChange={(event, newValue) => {\r\n                                                                setSelectedCountry(newValue ? newValue : '')\r\n                                                            }}\r\n                                                            value={selectedCountry}\r\n                                                            id=\"country-select-demo\"\r\n                                                            sx={{ width: '100%' }}\r\n                                                            options={countries}\r\n                                                            autoHighlight\r\n                                                            getOptionLabel={options => options.label ? options.label + \" - \" + options.code : options}\r\n                                                            renderOption={(props, option) => (\r\n                                                                <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\r\n                                                                    <img\r\n                                                                        loading=\"lazy\"\r\n                                                                        width=\"20\"\r\n                                                                        src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`}\r\n                                                                        srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`}\r\n                                                                        alt=\"\"\r\n                                                                    />\r\n                                                                    {option.label} ({option.code}) +{option.phone}\r\n                                                                </Box>\r\n                                                            )}\r\n                                                            renderInput={(params) => (\r\n                                                                <TextField\r\n                                                                    error={error && country === \"\"}\r\n                                                                    {...params}\r\n                                                                    label=\"Choose a country\"\r\n                                                                    value={country}\r\n                                                                    inputProps={{\r\n                                                                        ...params.inputProps,\r\n                                                                        autoComplete: 'new-password', // disable autocomplete and autofill\r\n                                                                    }}\r\n                                                                />\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row mt-3\">\r\n                        </div>\r\n                        <div className=\"row mt-5\">\r\n                            <div className=\"col-12\">\r\n                                <div className=\"app-card app-card-settings shadow-sm p-4\">\r\n                                    <div className=\"app-card-body\">\r\n                                        <div className=\"row g-3 mb-4 align-items-center justify-content-between\">\r\n                                            <div className=\"col-auto\">\r\n                                                <h1 className=\"app-page-title mb-0\">Events</h1>\r\n                                            </div>\r\n                                            <div className=\"col-auto\">\r\n                                                <div className=\"page-utilities\">\r\n                                                    <div\r\n                                                        className=\"row g-2 justify-content-start justify-content-md-end align-items-center\">\r\n                                                        <div className=\"col-auto\">\r\n                                                            {!loaderEvents ? (\r\n                                                                <select className=\"form-select w-auto\" onChange={eventOnChange}>\r\n                                                                    {\r\n                                                                        events.map(event => (\r\n                                                                            <option value={event.eventId}>{event.name}</option>\r\n                                                                        ))\r\n                                                                    }\r\n                                                                </select>\r\n                                                            ) : (\r\n                                                                <div className=\"col-12 align-self-center text-start\">\r\n                                                                    <Loader type=\"Bars\" color={THEME_COLOR_CODE} height={30} width={80} />\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </div>\r\n                                                        <div className=\"col-auto\">\r\n                                                            <div className=\"col-auto\">\r\n                                                                <button type=\"submit\"\r\n                                                                        onClick={onAddButtonClicked}\r\n                                                                        className=\"btn app-btn-secondary\">Add\r\n                                                                </button>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"table-responsive\">\r\n                                            <table className=\"table app-table-hover mb-0 text-left\">\r\n                                                <thead>\r\n                                                <tr>\r\n                                                    <th className=\"cell\">Event Name</th>\r\n                                                    <th className=\"cell\">Remove</th>\r\n                                                </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                {\r\n                                                    selectedEvents && (selectedEvents.map(e => (\r\n                                                        <tr>\r\n                                                            <td className=\"cell\">{e.name}</td>\r\n                                                            <td className=\"cell\">\r\n                                                                <a style={{cursor: \"pointer\"}}\r\n                                                                   onClick={() => onRemoveButtonClicked(e.eventId)}\r\n                                                                   className=\"btn-sm btn-outline-danger\">X</a>\r\n                                                            </td>\r\n                                                        </tr>\r\n                                                    )))\r\n                                                }\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <ToastContainer />\r\n                    </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={props.handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={clickOnUpdate} style={{color: \"#ffffff\"}}>\r\n                        Update Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n                <Footer props={props}/>\r\n            </Modal>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpdateModal;\r\n",{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":1,"column":16,"nodeType":"124","messageId":"125","endLine":1,"endColumn":24},{"ruleId":"126","severity":1,"message":"127","line":14,"column":37,"nodeType":"128","endLine":15,"endColumn":49},{"ruleId":"122","severity":1,"message":"129","line":7,"column":11,"nodeType":"124","messageId":"125","endLine":7,"endColumn":19},{"ruleId":"126","severity":1,"message":"127","line":36,"column":21,"nodeType":"128","endLine":36,"endColumn":92},{"ruleId":"126","severity":1,"message":"127","line":62,"column":33,"nodeType":"128","endLine":64,"endColumn":84},{"ruleId":"122","severity":1,"message":"130","line":38,"column":9,"nodeType":"124","messageId":"125","endLine":38,"endColumn":22},{"ruleId":"131","severity":1,"message":"132","line":51,"column":8,"nodeType":"133","endLine":51,"endColumn":10,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":92,"column":18,"nodeType":"137","messageId":"138","endLine":92,"endColumn":20},{"ruleId":"135","severity":1,"message":"136","line":93,"column":32,"nodeType":"137","messageId":"138","endLine":93,"endColumn":34},{"ruleId":"135","severity":1,"message":"136","line":114,"column":18,"nodeType":"137","messageId":"138","endLine":114,"endColumn":20},{"ruleId":"135","severity":1,"message":"136","line":115,"column":32,"nodeType":"137","messageId":"138","endLine":115,"endColumn":34},{"ruleId":"135","severity":1,"message":"136","line":138,"column":82,"nodeType":"137","messageId":"138","endLine":138,"endColumn":84},{"ruleId":"126","severity":1,"message":"139","line":138,"column":133,"nodeType":"128","endLine":138,"endColumn":195},{"ruleId":"135","severity":1,"message":"136","line":193,"column":116,"nodeType":"137","messageId":"138","endLine":193,"endColumn":118},{"ruleId":"122","severity":1,"message":"140","line":43,"column":9,"nodeType":"124","messageId":"125","endLine":43,"endColumn":14},{"ruleId":"131","severity":1,"message":"132","line":69,"column":8,"nodeType":"133","endLine":69,"endColumn":10,"suggestions":"141"},{"ruleId":"135","severity":1,"message":"136","line":107,"column":27,"nodeType":"137","messageId":"138","endLine":107,"endColumn":29},{"ruleId":"135","severity":1,"message":"142","line":130,"column":31,"nodeType":"137","messageId":"138","endLine":130,"endColumn":33},{"ruleId":"135","severity":1,"message":"136","line":312,"column":87,"nodeType":"137","messageId":"138","endLine":312,"endColumn":89},{"ruleId":"135","severity":1,"message":"136","line":319,"column":86,"nodeType":"137","messageId":"138","endLine":319,"endColumn":88},{"ruleId":"126","severity":1,"message":"139","line":471,"column":69,"nodeType":"128","endLine":473,"endColumn":111},{"ruleId":"122","severity":1,"message":"143","line":1,"column":16,"nodeType":"124","messageId":"125","endLine":1,"endColumn":25},{"ruleId":"122","severity":1,"message":"123","line":1,"column":27,"nodeType":"124","messageId":"125","endLine":1,"endColumn":35},{"ruleId":"135","severity":1,"message":"136","line":10,"column":23,"nodeType":"137","messageId":"138","endLine":10,"endColumn":25},{"ruleId":"144","severity":1,"message":"145","line":27,"column":21,"nodeType":"128","endLine":27,"endColumn":73},{"ruleId":"126","severity":1,"message":"139","line":31,"column":93,"nodeType":"128","endLine":31,"endColumn":144},{"ruleId":"126","severity":1,"message":"139","line":61,"column":37,"nodeType":"128","endLine":61,"endColumn":114},{"ruleId":"122","severity":1,"message":"146","line":7,"column":38,"nodeType":"124","messageId":"125","endLine":7,"endColumn":54},{"ruleId":"122","severity":1,"message":"147","line":41,"column":12,"nodeType":"124","messageId":"125","endLine":41,"endColumn":24},{"ruleId":"131","severity":1,"message":"148","line":91,"column":8,"nodeType":"133","endLine":91,"endColumn":38,"suggestions":"149"},{"ruleId":"135","severity":1,"message":"136","line":149,"column":27,"nodeType":"137","messageId":"138","endLine":149,"endColumn":29},{"ruleId":"135","severity":1,"message":"142","line":172,"column":31,"nodeType":"137","messageId":"138","endLine":172,"endColumn":33},{"ruleId":"135","severity":1,"message":"136","line":243,"column":31,"nodeType":"137","messageId":"138","endLine":243,"endColumn":33},{"ruleId":"135","severity":1,"message":"136","line":337,"column":87,"nodeType":"137","messageId":"138","endLine":337,"endColumn":89},{"ruleId":"135","severity":1,"message":"136","line":344,"column":86,"nodeType":"137","messageId":"138","endLine":344,"endColumn":88},{"ruleId":"126","severity":1,"message":"139","line":499,"column":65,"nodeType":"128","endLine":501,"endColumn":106},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'isActive' is assigned a value but never used.","'selectedEvent' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getEvents'. Either include it or remove the dependency array.","ArrayExpression",["152"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'image' is assigned a value but never used.",["153"],"Expected '!==' and instead saw '!='.","'useEffect' is defined but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","'WHITE_COLOR_CODE' is defined but never used.","'loaderSubmit' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'files', 'getEvents', 'setInitialValues', and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["154"],"no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},{"desc":"155","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [getEvents]",{"range":"160","text":"161"},{"range":"162","text":"161"},"Update the dependencies array to be: [files, getEvents, props.athlete, props.modalId, setInitialValues, values]",{"range":"163","text":"164"},[1842,1844],"[getEvents]",[2225,2227],[3017,3047],"[files, getEvents, props.athlete, props.modalId, setInitialValues, values]"]